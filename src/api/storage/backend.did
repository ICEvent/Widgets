type Uploader = 
 record {
   files: vec FileId__1;
   quota: nat;
   uploader: principal;
 };
type Timestamp = int;
type Result_1 = 
 variant {
   err: text;
   ok: FileId;
 };
type Result = 
 variant {
   err: text;
   ok: nat;
 };
type FileInfo = 
 record {
   chunkCount: nat;
   createdAt: Timestamp;
   extension: FileExtension;
   name: text;
   owner: principal;
   size: nat;
 };
type FileId__1 = text;
type FileId = text;
type FileExtension = 
 variant {
   aac;
   avi;
   gif;
   jpeg;
   jpg;
   mp3;
   mp4;
   png;
   svg;
   wav;
 };
type FileData = 
 record {
   chunkCount: nat;
   cid: principal;
   createdAt: Timestamp;
   extension: FileExtension;
   fileId: FileId__1;
   name: text;
   owner: principal;
   size: nat;
   uploadedAt: Timestamp;
 };
type Container = 
 service {
   addModerator: (principal) -> (Result);
   availableCycles: () -> (nat) query;
   fetchFileChunk: (FileId, nat) -> (opt blob);
   fetchFileChunks: (FileId) -> (opt blob);
   fetchFileInfo: (FileId) -> (opt FileData);
   getAdmin: () -> (principal) query;
   getFileIds: () -> (vec FileId) query;
   getModerators: () -> (vec principal) query;
   getQuota: () -> (record {
                      quota: nat;
                      used: nat;
                    }) query;
   getStatus: () -> (vec record {
                           principal;
                           nat;
                         }) query;
   getUploaders: () -> (vec Uploader) query;
   putFileChunks: (FileId, nat, nat, blob) -> (Result);
   putFileInfo: (FileInfo) -> (Result_1);
   saveFileChunks: (FileId, nat, nat, blob) -> (Result);
   setAdmin: (principal) -> (Result);
   setUploaders: (principal, nat) -> (Result);
   updateStatus: () -> ();
   wallet_receive: () -> ();
 };
service : () -> Container
